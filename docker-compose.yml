version: '3.8'

services:
  # Frontend - Urban Digital Twin Platform
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.urban-twin.rule=Host(`gemelo-digital-baires.local`)"
      - "traefik.http.services.urban-twin.loadbalancer.server.port=80"
    networks:
      - urban-twin-network

  # Backend API (future implementation)
  backend:
    image: node:18-alpine
    working_dir: /app
    command: sh -c "echo 'Backend service will be implemented here' && sleep infinity"
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://mongo:27017/urban_twin
      - REDIS_URL=redis://redis:6379
    networks:
      - urban-twin-network
    depends_on:
      - mongo
      - redis

  # MongoDB for data persistence
  mongo:
    image: mongo:6
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: urban_admin
      MONGO_INITDB_ROOT_PASSWORD: urban_password_2024
      MONGO_INITDB_DATABASE: urban_twin
    volumes:
      - mongo_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - urban-twin-network

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    networks:
      - urban-twin-network

  # Nginx Proxy (for production)
  proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
    networks:
      - urban-twin-network
    profiles:
      - production

  # InfluxDB for time-series data (IoT sensors)
  influxdb:
    image: influxdb:2.7
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=urban_admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=influx_password_2024
      - DOCKER_INFLUXDB_INIT_ORG=BuenosAires
      - DOCKER_INFLUXDB_INIT_BUCKET=urban_sensors
      - DOCKER_INFLUXDB_INIT_RETENTION=90d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=urban_admin_token_2024
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - urban-twin-network
    profiles:
      - sensors

  # Grafana for data visualization
  grafana:
    image: grafana/grafana:10.2.0
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_password_2024
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - urban-twin-network
    profiles:
      - monitoring

networks:
  urban-twin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  grafana_data:
    driver: local